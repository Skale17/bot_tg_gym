import telebot
from telebot import types
import time
import threading
import schedule
from base import *

TOKEN = "6964314400:AAFsD07Nf5eTUOmYdzoCwTMb9beJfrfaQ-Q"
 
name = None
bot = telebot.TeleBot(TOKEN)
trans_day = { 
                    'Mon':'–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                    'Tue':'–≤—Ç–æ—Ä–Ω–∏–∫',
                    'Wed':'—Å—Ä–µ–¥–∞',
                    'Thu':'—á–µ—Ç–≤–µ—Ä–≥',
                    'Fri':'–ø—è—Ç–Ω–∏—Ü–∞',
                    'Sat':'—Å—É–±–±–æ—Ç–∞',
                    'Sun':'–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
                }

@bot.message_handler(commands=['start'])
def comand_start(message):
    create_table('main_base')
    bot.send_message(message.from_user.id,'–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –ø—Ä–æ–∑–≤–∏—â–µ')
    bot.register_next_step_handler(message, user_name)


def user_name(message):
    name = message.text.strip()
    id = message.from_user.id
    mmr = int(500)
    day = ''
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='users'))
    markup.add(types.InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –¥–Ω–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è ', callback_data='day'))
    markup.add(types.InlineKeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ', callback_data='info'))
    result = insert_user_info(name, id, day, mmr)
    if result == True:
        bot.send_message(message.from_user.id,f"""–ù—É –≤—Å–µ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ 9 –∫—Ä—É–≥–æ–≤ –∞–¥–∞ –≤ G–∞—á–∏ –∫–∞—á–∞–ª–∫–µüòà‚ò†Ô∏èüòà —Å–µ–π—á–∞—Å –º—ã –∑–∞—á–∏—Å–ª–µ–ª–∏ —Ç–µ–±–µ 500 MMR –∏ –¥–∞–ª—å—à–µ —Ç—ã –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å –¥–Ω–∏ –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ö–æ–¥–∏—à—å –≤ –∑–∞–ª –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ —É –Ω–∞—Å –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /menu""", reply_markup=markup)
    elif result == False:
        bot.send_message(message.chat.id,f"""–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω""", reply_markup=markup)
    
@bot.callback_query_handler(func=lambda query: query.data == 'day')
def user_day(query):
    bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    user_id = query.from_user.id
    chat_id = query.message.chat.id
    day = ''
    update_day(day, user_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', callback_data='mon'))
    markup.add(types.InlineKeyboardButton('–í—Ç–æ—Ä–Ω–∏–∫', callback_data='tue'))
    markup.add(types.InlineKeyboardButton('–°—Ä–µ–¥–∞', callback_data='wed'))
    markup.add(types.InlineKeyboardButton('–ß–µ—Ç–≤–µ—Ä–≥', callback_data='thu'))
    markup.add(types.InlineKeyboardButton('–ü—è—Ç–Ω–∏—Ü–∞', callback_data='fri'))
    markup.add(types.InlineKeyboardButton('–°—É–±–±–æ—Ç–∞', callback_data='sat'))
    markup.add(types.InlineKeyboardButton('–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', callback_data='sun'))
    markup.add(types.InlineKeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='save'))
    bot.send_message(chat_id,"–í—ã–±–µ—Ä–∏ –¥–Ω–∏ –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ö–æ–¥–∏—à—å –≤ –∑–∞–ª", reply_markup=markup)


@bot.callback_query_handler(func=lambda query: query.data == 'mon')
def mon(query):
    users_input_days(query, ' –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
@bot.callback_query_handler(func=lambda query: query.data == 'tue')
def tue(query):
    users_input_days(query, ' –≤—Ç–æ—Ä–Ω–∏–∫')
@bot.callback_query_handler(func=lambda query: query.data == 'wed')
def wed(query):
    users_input_days(query, ' —Å—Ä–µ–¥–∞')
@bot.callback_query_handler(func=lambda query: query.data == 'thu')
def thu(query):
    users_input_days(query, ' —á–µ—Ç–≤–µ—Ä–≥')
@bot.callback_query_handler(func=lambda query: query.data == 'fri')
def fri(query):
    users_input_days(query, ' –ø—è—Ç–Ω–∏—Ü–∞')
@bot.callback_query_handler(func=lambda query: query.data == 'sat')
def sat(query):
    users_input_days(query, ' —Å—É–±–±–æ—Ç–∞')
@bot.callback_query_handler(func=lambda query: query.data == 'sun')
def sun(query):
    users_input_days(query, ' –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')

def users_input_days(query, days):
    user_id = query.from_user.id
    day = str(select_days_from_base(user_id))
    filter_day = ''.join(symbol for symbol in day if symbol.isspace() or symbol.isalpha())
    new_day = filter_day + days
    update_day(new_day, user_id)

@bot.callback_query_handler(func=lambda query: query.data == 'save')
def Save(query):
    user_id = query.from_user.id
    chat_id = query.message.chat.id
    bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–î–∞', callback_data='yes_save'))
    markup.add(types.InlineKeyboardButton('–ù–µ—Ç', callback_data='day'))
    day = select_days_from_base(user_id)
    filter_day = filter_str(day)
    bot.send_message(chat_id,f"–î–Ω–∏ –≤—ã–±—Ä–∞–Ω—ã –≤–µ—Ä–Ω–æ?\n {filter_day}", reply_markup=markup)
    
@bot.callback_query_handler(func=lambda query: query.data == 'yes_save')
def Save_yes(query):
    bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    message = query.message
    comand_menu(message)

@bot.callback_query_handler(func=lambda query: query.data == 'name')
def rename(query):
    bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    bot.send_message(query.from_user.id,f"–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –Ω–æ–≤–æ–µ –ø—Ä–æ–∑–≤–∏—â–µ",)
    bot.register_next_step_handler(query.message, change_name)

def change_name(message):
    user_id = message.from_user.id
    name = message.text.strip()
    update_user_name(name, user_id)
    bot.send_message(user_id,f"–¢–≤–æ–µ –Ω–æ–≤–æ–µ –ø—Ä–æ–∑–≤–∏—â–µ {name}",)
    comand_menu(message)
    
    

def filter_str(text):
    return ''.join(symbol for symbol in text if symbol.isspace() or symbol.isalpha())
    


    
    

def survey():
    message = '–¢—ã —Å–µ–≥–æ–¥–Ω—è –∏–¥–µ—à—å –≤ –∑–∞–ª?'
    current_time = time.time()
    formatted_time = time.ctime(current_time)
    date = formatted_time.split()
    day_time = trans_day[date[0]]
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–î–∞, –∏–¥—É', callback_data='yes'))
    markup.add(types.InlineKeyboardButton('–ù–µ—Ç, –Ω–µ –∏–¥—É', callback_data='no'))
    users = select_users()
    for el in users:
        el_str = str.lower(el[2])
        user_days = el_str.split()
        if day_time in user_days:
            bot.send_message(el[0], message, reply_markup=markup)

@bot.message_handler(commands=['liders'])
def liders(message):
    users = select_users() 
    text = users
    for el in users:
        bot.send_message(el[0], text)



def schedule_survey():
    schedule.every().day.at("21:28").do(survey)
    schedule.every().day.at("22:43").do(liders)
    while True:
        schedule.run_pending()
        time.sleep(1)
    
schedule_survey = threading.Thread(target=schedule_survey)
schedule_survey.start()

@bot.callback_query_handler(func=lambda query: query.data == 'no')
def count_no(query):
    message = '–ù–µ —Å–º–æ–∂–µ—Ç –ø–æ–π—Ç–∏ —Å–µ–≥–æ–¥–Ω—è –≤ –∑–∞–ª'
    count(query, message, False)

@bot.callback_query_handler(func=lambda query: query.data == 'yes')
def count_yes(query,):
    message = '–ò–¥–µ—Ç —Å–µ–≥–æ–¥–Ω—è –≤ –∑–∞–ª'
    count(query, message, True)

def count(query, mess, p_m):
    bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    user_id = (query.from_user.id,)
    mmr = select_mmr(user_id)
    current_mmr = int(mmr[0])
    if p_m == True:
        new_mmr = current_mmr + 100
    elif p_m == False:
        new_mmr = current_mmr -150
    update_mmr(new_mmr, user_id)
    all_users =  all_id()
    name = select_user_name(user_id)
    for id in all_users:
        bot.send_message(id[0],f'{name[0]} {mess}', disable_notification=True)


@bot.callback_query_handler(func=lambda call: call.data == 'users')
def callback(call):
    users = select_users()
    info = ''
    for el in users:
        info += f'–ò–º—è: {el[1]}| –î–Ω–∏: {el[2]}| MMR: {el[3]}\n'
    bot.send_message(call.message.chat.id, info)

@bot.callback_query_handler(func=lambda query: query.data == 'info')
def info(query):
    info = f'''–≠—Ç–æ –æ—Ç–¥–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:
      –≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è –±–æ–ª—å—à–µ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏
      —á—Ç–æ–±—ã –ø–æ—Å–µ—â–∞—Ç—å –∫–∞—á–∞–ª–∫—É —Å–∫–∞–∂–µ–º —Ç–∞–∫.
      –ö–æ–≥–¥–∞ —Ç—ã –≤–ø–∏—Å–∞–ª —Å–≤–æ–µ –∏–º—è —Ç—ã –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å –¥–Ω–∏ –ø–æ—Å–∏—â–µ–Ω–∏—è
      –≤ —ç—Ç–∏ –¥–Ω–∏ —Ç–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–ø—Ä–æ—Å –∏–¥–µ—à—å —Ç—ã –≤ –∑–∞–ª –∏–ª–∏ –Ω–µ—Ç
      –µ—Å–ª–∏ –æ—Ç–≤–µ—á–∞–µ—à—å –¥–∞ —Ç–æ–≥–¥–∞ —Ç–µ–±–µ +100 MMR, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–≥–¥–∞ -150
      –≤ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø–ª–∞–Ω–∞—Ö –¥—É–º–∞—é –≤–≤–µ—Å—Ç–∏ –∑–≤–∞–Ω–∏—è –∑–∞ MMR
      –Ω—É –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –∏–¥–µ–∏ —Ç–æ –≥–æ–≤–æ—Ä–∏—Ç–µ.
      –ö–æ–≥–¥–∞ –∫—Ç–æ –ª–∏–±–æ –Ω–∞–∂–∏–º–∞–µ—Ç –¥–∞ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ
      –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏—Ö–æ–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ –∑–≤—É–∫–∞
      —á—Ç–æ –∫—Ç–æ-—Ç–æ –∏–¥–µ—Ç –≤ –∑–∞–ªü•∂ü•∂'''
    bot.send_message(query.message.chat.id, info)


@bot.message_handler(commands=['base'])
def base_print(message):
    users = select_users()
    result_str = "\n".join(map(str, users))
    bot.send_message(message.chat.id, result_str)

@bot.message_handler(commands=['menu'])
def comand_menu(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='users'))
    markup.add(types.InlineKeyboardButton('–°–º–µ–Ω–∏—Ç—å –¥–Ω–∏ –ø–æ—Å–∏—â–µ–Ω–∏—è ', callback_data='day'))
    markup.add(types.InlineKeyboardButton('–°–º–µ–Ω–∏—Ç—å –ò–º—è', callback_data='name'))
    markup.add(types.InlineKeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ', callback_data='info'))
    bot.send_message(message.chat.id, "–ú–µ–Ω—é", reply_markup=markup)
    
bot.polling(non_stop=True)
