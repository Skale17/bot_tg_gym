import telebot
from telebot import types
import time
import threading
import schedule
from base import *
from datetime import datetime
import random

TOKEN = "6964314400:AAFsD07Nf5eTUOmYdzoCwTMb9beJfrfaQ-Q"
 
name = None
bot = telebot.TeleBot(TOKEN)
challenges = {1:('–±–∏—Ü–µ–ø—Å', 1, 3, 10, 40),
              2:('–∂–∏–º –ª–µ–∂–∞', 1, 3, 10, 65),
              3:('–ø—Ä–∏—Å–∏–¥–∞–Ω–∏–µ',1, 3, 20, 150,),
}
days_of_week = { 
                    'Mon':'–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                    'Tue':'–í—Ç–æ—Ä–Ω–∏–∫',
                    'Wed':'–°—Ä–µ–¥–∞',
                    'Thu':'–ß–µ—Ç–≤–µ—Ä–≥',
                    'Fri':'–ü—è—Ç–Ω–∏—Ü–∞',
                    'Sat':'–°—É–±–±–æ—Ç–∞',
                    'Sun':'–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
}
adding_mmr = {
              'yes':('–ò–¥–µ—Ç —Å–µ–≥–æ–¥–Ω—è –≤ –∑–∞–ª', 100, True),
              'no':('–ù–µ —Å–º–æ–∂–µ—Ç –ø–æ–π—Ç–∏ —Å–µ–≥–æ–¥–Ω—è –≤ –∑–∞–ª', 150, False),
              'no_chall':('–í–∏–¥–∏–º–æ —Ç–µ–±–µ –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ–≤–µ–∑–ª–æ, –ø–æ–ø—ã—Ç–∞–π—Å—è –µ—â–µ —Ä–∞–∑ -60 MMR', 60, False),
              'yes_chall':('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –∑–∞ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å 50 MMR', 50, True),
}

@bot.message_handler(commands=['start'])
def comand_start(message):
    create_table()
    bot.send_message(message.from_user.id,'–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –ø—Ä–æ–∑–≤–∏—â–µ')
    bot.register_next_step_handler(message, user_name)



def user_name(message):
    name = message.text.strip()
    id = message.from_user.id
    mmr = int(500)
    day = ''
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='users'))
    markup.add(types.InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –¥–Ω–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è ', callback_data='day'))
    markup.add(types.InlineKeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ', callback_data='info'))
    result = insert_user_info(name, id, day, mmr)
    if result == True:
        bot.send_message(message.from_user.id,f"""–ù—É –≤—Å–µ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ 9 –∫—Ä—É–≥–æ–≤ –∞–¥–∞ –≤ G–∞—á–∏ –∫–∞—á–∞–ª–∫–µüòà‚ò†Ô∏èüòà —Å–µ–π—á–∞—Å –º—ã –∑–∞—á–∏—Å–ª–µ–ª–∏ —Ç–µ–±–µ 500 MMR –∏ –¥–∞–ª—å—à–µ —Ç—ã –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å –¥–Ω–∏ –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ö–æ–¥–∏—à—å –≤ –∑–∞–ª –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ —É –Ω–∞—Å –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /menu""", reply_markup=markup)
    elif result == False:
        bot.send_message(message.chat.id,f"""–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω""", reply_markup=markup)
    
@bot.callback_query_handler(func=lambda query: query.data == 'day')
def user_day(query):
    bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    user_id = query.from_user.id
    chat_id = query.message.chat.id
    day = ''
    update_day(day, user_id)
    markup = types.InlineKeyboardMarkup()
    for day_code, day_name in days_of_week.items():
        markup.add(types.InlineKeyboardButton(day_name, callback_data=day_code))
    markup.add(types.InlineKeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='save'))
    bot.send_message(chat_id,"–í—ã–±–µ—Ä–∏ –¥–Ω–∏ –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ö–æ–¥–∏—à—å –≤ –∑–∞–ª", reply_markup=markup)


@bot.callback_query_handler(func=lambda query: query.data in days_of_week)
def days_definition(query):
    day_key = query.data
    day_name = days_of_week[day_key]
    users_input_days(query, f' {day_name}')

def users_input_days(query, days):
    user_id = query.from_user.id
    day = str(select_days_from_base(user_id))
    filter_day = ''.join(symbol for symbol in day if symbol.isspace() or symbol.isalpha())
    new_day = filter_day + days
    update_day(new_day, user_id)

@bot.callback_query_handler(func=lambda query: query.data == 'save')
def save(query):
    user_id = query.from_user.id
    chat_id = query.message.chat.id
    bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–î–∞', callback_data='yes_save'))
    markup.add(types.InlineKeyboardButton('–ù–µ—Ç', callback_data='day'))
    day = select_days_from_base(user_id)
    filter_day = filter_str(day)
    bot.send_message(chat_id,f"–î–Ω–∏ –≤—ã–±—Ä–∞–Ω—ã –≤–µ—Ä–Ω–æ?\n {filter_day}", reply_markup=markup)
    
@bot.callback_query_handler(func=lambda query: query.data == 'yes_save')
def save_yes(query):
    bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    message = query.message
    comand_menu(message)

@bot.callback_query_handler(func=lambda query: query.data == 'name')
def rename(query):
    bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    bot.send_message(query.from_user.id,f"–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –Ω–æ–≤–æ–µ –ø—Ä–æ–∑–≤–∏—â–µ",)
    bot.register_next_step_handler(query.message, change_name)

def change_name(message):
    user_id = message.from_user.id
    name = message.text.strip()
    update_user_name(name, user_id)
    bot.send_message(user_id,f"–¢–≤–æ–µ –Ω–æ–≤–æ–µ –ø—Ä–æ–∑–≤–∏—â–µ {name}",)
    comand_menu(message)
    
    

def filter_str(text):
    return ''.join(symbol for symbol in text if symbol.isspace() or symbol.isalpha())
    


    
    

def survey():
    message = '–¢—ã —Å–µ–≥–æ–¥–Ω—è –∏–¥–µ—à—å –≤ –∑–∞–ª?'
    current_time = time.time()
    formatted_time = time.ctime(current_time)
    date = formatted_time.split()
    day_time = days_of_week[date[0]]
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–î–∞, –∏–¥—É', callback_data='yes'))
    markup.add(types.InlineKeyboardButton('–ù–µ—Ç, –Ω–µ –∏–¥—É', callback_data='no'))
    users = select_users()
    for el in users:
        el_str = str(el[2])
        user_days = el_str.split()
        if day_time in user_days:
            bot.send_message(el[0], message, reply_markup=markup)

def liders():
    users = select_users() 
    mmr_str = ''
    for el in users:
        mmr_str = str(mmr_str) + str(f' {el[3]}')
    mmr_2 = mmr_str.split()
    mmr_2.sort(reverse=True)
    
    top1 = select__name_where_mmr(mmr_2[0])
    try:
        top2 = select__name_where_mmr(mmr_2[1])
        text = f'üèÜüèã‚Äç‚ôÇ–¢–û–ü –ú–ï–°–Ø–¶–êüèã‚Äç‚ôÇüèÜ\nü•á{filter_str(top1)}  ‚û°Ô∏è‚û°Ô∏è  {mmr_2[0]}MMR\nü•à{filter_str(top2)}  ‚û°Ô∏è‚û°Ô∏è  {mmr_2[1]}MMR'
    except:
        text = f'–¢–û–ü –Ω–µ –≤–æ–∑–º–æ–∂–µ–Ω –∏–∑ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞'
    try:
        top3 = select__name_where_mmr(mmr_2[2])
        text = f'üèÜüèã‚Äç‚ôÇ–¢–û–ü –ú–ï–°–Ø–¶–êüèã‚Äç‚ôÇüèÜ\nü•á{filter_str(top1)}  ‚û°Ô∏è‚û°Ô∏è  {mmr_2[0]}MMR\nü•à{filter_str(top2)}  ‚û°Ô∏è‚û°Ô∏è  {mmr_2[1]}MMR\nü•â{filter_str(top3)}  ‚û°Ô∏è‚û°Ô∏è  {mmr_2[2]}MMR '
    except:
        pass
    for el in users:
        bot.send_message(el[0], text)
def schedule_survey():
    schedule.every().day.at("19:44").do(survey)
    if datetime.now().day == 1:
        schedule.every().day.at("20:00").do(liders)
    while True:
        schedule.run_pending()
        time.sleep(1)

    
schedule_survey = threading.Thread(target=schedule_survey)
schedule_survey.start()





@bot.callback_query_handler(func=lambda query: query.data in adding_mmr)
def days_definition(query):
    mmr_key = query.data
    message, mmr, p_m = adding_mmr[mmr_key]
    count(query, message, mmr, p_m)

def count(query, mess, num, p_m):
    bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    user_id = (query.from_user.id,)
    mmr = select_mmr(user_id)
    current_mmr = int(mmr[0])
    if p_m == True:
        new_mmr = current_mmr + num
    elif p_m == False:
        new_mmr = current_mmr - num
    update_mmr(new_mmr, user_id)
    all_users =  all_id()
    name = select_user_name(user_id)
    for id in all_users:
        bot.send_message(id[0],f'{name[0]} {mess}', disable_notification=True)

def lucky(a,b):
    return random.randint(a, b)
def rounded(number):
    return round(number / 5) * 5

@bot.callback_query_handler(func=lambda query: query.data == 'challenge')
def challenge(query):
    current_time = time.time()
    formatted_time = time.ctime(current_time)
    date = formatted_time.split()
    day_time = days_of_week[date[0]]
    users = select_users()
    num_chell = lucky(1,3)
    challenge, approaches_min, approaches_max, weight_min, weight_max = challenges[num_chell]
    approaches = lucky(approaches_min, approaches_max)
    try:
        weight = lucky(weight_min, weight_max)
        r_weight = rounded(weight)
        text_weight = f'—Å –≤–µ—Å–æ–º {r_weight}–∫–≥'
    except:
        pass
    mess = f'–î–µ–ª–∞–π {challenge}, {approaches} –ø–æ–¥—Ö–æ–¥–∞, {text_weight}'
    user_id = query.from_user.id
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–°–¥–µ–ª–∞–ª, –ª–µ–≥—á–∞–π—à–µ–µ –¥–ª—è –≤–µ–ª–µ—á–∞–π—à–µ–≥–æ', callback_data='yes_chall'))
    markup.add(types.InlineKeyboardButton('–Ø —Å–ª–∞–±–∫–∏–π —Ç—ñ–ª–æ–º', callback_data='no_chall'))
    for el in users:
        el_str = str(el[2])
        user_days = el_str.split()
        if day_time in user_days:
            bot.send_message(user_id, mess, reply_markup=markup)
        else:
            bot.send_message(user_id, '–î–ª—è –∏—Å–ø—ã—Ç–∞–Ω–∏—è —É–¥–∞—á–∏ –Ω—É–∂–Ω–æ –±—ã—Ç—å –≤ –∑–∞–ª–µ')
        
@bot.callback_query_handler(func=lambda call: call.data == 'users')
def callback(call):
    users = select_users()
    info = ''
    for el in users:
        info += f'–ò–º—è: {el[1]}| –î–Ω–∏: {el[2]}| MMR: {el[3]}\n'
    bot.send_message(call.message.chat.id, info)

@bot.callback_query_handler(func=lambda query: query.data == 'info')
def info(query):
    info = f'''–≠—Ç–æ –æ—Ç–¥–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:
      –≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è –±–æ–ª—å—à–µ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏
      —á—Ç–æ–±—ã –ø–æ—Å–µ—â–∞—Ç—å –∫–∞—á–∞–ª–∫—É —Å–∫–∞–∂–µ–º —Ç–∞–∫.
      –ö–æ–≥–¥–∞ —Ç—ã –≤–ø–∏—Å–∞–ª —Å–≤–æ–µ –∏–º—è —Ç—ã –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å –¥–Ω–∏ –ø–æ—Å–∏—â–µ–Ω–∏—è
      –≤ —ç—Ç–∏ –¥–Ω–∏ —Ç–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–ø—Ä–æ—Å –∏–¥–µ—à—å —Ç—ã –≤ –∑–∞–ª –∏–ª–∏ –Ω–µ—Ç
      –µ—Å–ª–∏ –æ—Ç–≤–µ—á–∞–µ—à—å –¥–∞ —Ç–æ–≥–¥–∞ —Ç–µ–±–µ +100 MMR, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–≥–¥–∞ -150
      –≤ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø–ª–∞–Ω–∞—Ö –¥—É–º–∞—é –≤–≤–µ—Å—Ç–∏ –∑–≤–∞–Ω–∏—è –∑–∞ MMR
      –Ω—É –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –∏–¥–µ–∏ —Ç–æ –≥–æ–≤–æ—Ä–∏—Ç–µ.
      –ö–æ–≥–¥–∞ –∫—Ç–æ –ª–∏–±–æ –Ω–∞–∂–∏–º–∞–µ—Ç –¥–∞ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ
      –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏—Ö–æ–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ –∑–≤—É–∫–∞
      —á—Ç–æ –∫—Ç–æ-—Ç–æ –∏–¥–µ—Ç –≤ –∑–∞–ªü•∂ü•∂
      –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –Ω–∞—Ö–æ–¥—è—Ç—å—Å—è —á–µ–ª–µ–Ω–¥–∂—ã —Ç–∞–º –º–æ–≥—É—Ç
      –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ —Ä–∞–∑–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å —Ä–∞–∑–Ω—ã–º –≤–µ—Å–æ–º –∏ —Ä–∞–∑–Ω—ã–º
      –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–±–µ –ª–∏–±–æ –¥–∞–¥—É—Ç
      50 MMR –ª–∏–±–æ —Å–Ω–∏–º—É—Ç 60 –µ—Å–ª–∏ –æ—Ç–∫–∞–∂–µ—à—Å—è'''
    bot.send_message(query.message.chat.id, info)


@bot.message_handler(commands=['base'])
def base_print(message):
    users = select_users()
    result_str = "\n".join(map(str, users))
    bot.send_message(message.chat.id, result_str)

@bot.message_handler(commands=['menu'])
def comand_menu(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='users'))
    markup.add(types.InlineKeyboardButton('–°–º–µ–Ω–∏—Ç—å –¥–Ω–∏ –ø–æ—Å–∏—â–µ–Ω–∏—è ', callback_data='day'))
    markup.add(types.InlineKeyboardButton('–°–º–µ–Ω–∏—Ç—å –ò–º—è', callback_data='name'))
    markup.add(types.InlineKeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ', callback_data='info'))
    markup.add(types.InlineKeyboardButton('–ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É', callback_data='challenge'))
    
    bot.send_message(message.chat.id, "–ú–µ–Ω—é", reply_markup=markup)
    
bot.polling(non_stop=True)
